swagger: '2.0'
info: {}
tags:
  - name: pet
paths:
  '/api/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById_1
      produces:
        - application/xml
        - application/json
      parameters:
        - name: petId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        '400':
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/Pet'
        '404':
          description: Pet not found
          schema:
            $ref: '#/definitions/Pet'
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm_1
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: petId
          in: path
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the pet
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the pet
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ''
      operationId: deletePet_1
      produces:
        - application/xml
        - application/json
      parameters:
        - name: petId
          in: path
          required: true
          type: integer
          format: int64
        - name: api_key
          in: header
          required: false
          type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
  /api:
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: ''
      operationId: addPet_1
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        '405':
          description: Invalid input
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: ''
      operationId: updatePet_1
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
  /api/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus_1
      produces:
        - application/xml
        - application/json
      parameters:
        - name: status
          in: query
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        '400':
          description: Invalid status value
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
  /api/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags_1
      produces:
        - application/xml
        - application/json
      parameters:
        - name: tags
          in: query
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        '400':
          description: Invalid tag value
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
definitions:
  Pet:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: doggie
      status:
        type: string
        description: pet status in the store
        enum:
          - AVAILABLE
          - PENDING
          - SOLD
